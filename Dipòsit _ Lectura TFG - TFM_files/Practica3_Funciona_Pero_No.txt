/* ---------------------------------------------------------------
Práctica 1.
Código fuente : nbfast.c
Grau Informàtica
73215053G Mario Martí Sisó
47980064v Arnau Tallaví Borrull
--------------------------------------------------------------- */
#include<stdio.h>
#include<stdlib.h>
#include<math.h>
#include<time.h>
#include <stdio.h>
#include<unistd.h>
#include<pthread.h>
#include<stdbool.h>

#ifdef D_GLFW_SUPPORT
#include<GLFW/glfw3.h>
#endif

// Macros to make code a little bit easier to understand because for speedup reasons, I'll use only 1D arrays
#define PX(i) (3*i+1)
#define PY(i) (3*i+2)
#define MASS(i) (3*i+3)

#define VX(i) (4*i+0)
#define VY(i) (4*i+1)
#define AX(i) (4*i+2)
#define AY(i) (4*i+3)

double G=0.0001;
double dt=0.005;
double rcutoff=0.35;
double rlimit=0.03;
//nLocal con acceso global
int nLocal;
int nThreads = 4;
int nShared=500;
struct Node{
    struct Node *children[4];
    int external;

    double CMX;
    double CMY;
    double mass;
    double TRX;
    double TRY;

    double LLX;
    double LLY;

    double GCX;
    double GCY;
};
//Estructura para pasar los parámetros a los hilos que calculan la fuerza y mueven las partículas
typedef struct{
    int begin;
    int end;
}Parameters;
// Estructura que contiene el id que se le asignará a cada hilo
typedef struct{
    int id;
}idStruct;

typedef struct {
    double totalWorkingTime;
    double unbalance;
    double evaluatedParticles;
    double deletedParticles;
    double simplifications;
}stats;
// Variables de acceso global ya que todos los hilos deben poder acceder a ellas para realizar los cálculos
int *indexes, *indexesToDelete;
double *sBuff, *localBuff;
struct Node* tree;
Parameters *paramsBuff;
idStruct *idBuff;
int counterDelete = 0;
// Variable condicional que se usa para controlar cuando se pausa o sigue la ejecución de cada uno de los hilos
pthread_cond_t Sincro = PTHREAD_COND_INITIALIZER;
// Mutex que controla el acceso a la sección crítica donde se encuentra la variable condicional y el número de iteraciones a realizar
pthread_mutex_t Mutex = PTHREAD_MUTEX_INITIALIZER;
// Mutex que controla el acceso a la sección crítica donde se encuentra la variable que determina que hilo debe eliminar partículas
pthread_mutex_t MutexDelete = PTHREAD_MUTEX_INITIALIZER;
// Barrera que controlará que todos los hilos han terminado su iteración para que continue la ejecución de la aplicación
pthread_barrier_t barrier;
// Barrera que controlará que todos los hilos han finalizado en hacer sus cálculos antes de que se eliminen las partículas
pthread_barrier_t barrierDelete;
pthread_barrier_t barrierDelete2;
// Buffer que contiene las iteraciones que deben realizar cada hilo hasta pausarse
int *iterationsToDo;
// Variable booleana que determina si los hilos ya han ejecutado su función durante el número de iteraciones indicado en la aplicación
bool forceFinished = false;
// Buffer que contiene las estadísticas de cada hilo
stats *statsBuff;
// Buffer que contiene las estadísticas globales
stats *globalStats;
#ifdef D_GLFW_SUPPORT
//Estructura para pasar los parámetros al hilos que dibuja la salida gráfica
typedef struct{
    GLFWwindow *window;
    struct Node* tree;
    double *sBuff;
    int *indexes;
    double *radius;
    int nShared;
    double t;
}ParametersVisual;
//Inicializamos el Buffer para guardar los parámetros del hilo visual
ParametersVisual *paramsVisualBuff;
#endif

void buildTree(struct Node* node, double* shrdBuff, int *indexes, int n){
    if(n==1){ //This is an external node!
        node->external=1;
        node->CMX=shrdBuff[PX(indexes[0])];
        node->CMY=shrdBuff[PY(indexes[0])];
        node->mass=shrdBuff[MASS(indexes[0])];
    } else {
        node->external=0;
        //Arrays of indexes of particles per quartile
        int *NEi = (int *) malloc(sizeof(int)*n);
        int *NWi = (int *) malloc(sizeof(int)*n);
        int *SWi = (int *) malloc(sizeof(int)*n);
        int *SEi = (int *) malloc(sizeof(int)*n);
        int NWc=0, SWc=0,SEc=0, NEc=0;

        int i;
        /** For each particle we will check where is it located relative to the geometric center,
            to sort them into the 4 children nodes**/
        for(i=0;i<n;i++){
            if(shrdBuff[PY(indexes[i])] < node->GCY ){ //South half
                if(shrdBuff[PX(indexes[i])] < node->GCX){ //West wing
                    SWi[SWc]=indexes[i];
                    SWc++;
                } else {
                    SEi[SEc]=indexes[i];
                    SEc++;
                }
            } else { //North half
                if(shrdBuff[PX(indexes[i])] < node->GCX){ //West wing
                    NWi[NWc]=indexes[i];
                    NWc++;
                } else {
                    NEi[NEc]=indexes[i];
                    NEc++;
                }
            }
        }
        //If there are particles in the NorthWest quarter
        if(NEc>0){
            //This instruction declares a new node in the position 0
            node->children[0]= malloc(sizeof *node->children[0]);
            //We give the values of the Low Left and Top Right corner, and also the geometric center.
            node->children[0]->TRX=node->TRX;
            node->children[0]->TRY=node->TRY;
            node->children[0]->LLX=node->GCX;
            node->children[0]->LLY=node->GCY;
            node->children[0]->GCX=(node->GCX+node->TRX)/2;
            node->children[0]->GCY=(node->GCY+node->TRY)/2;
            //We build a tree in the new node, with the particles that are inside
            buildTree(node->children[0],shrdBuff,NEi,NEc);
        } else {
            //If not, we set the children to null
            node->children[0]=NULL;
        }
        //The next three blocks are exactly the same thing but for the other three nodes
        if(NWc>0){
            node->children[1]= malloc(sizeof *node->children[1]);
            node->children[1]->TRX=node->GCX;
            node->children[1]->TRY=node->TRY;
            node->children[1]->LLX=node->LLX;
            node->children[1]->LLY=node->GCY;
            node->children[1]->GCX=(node->LLX+node->GCX)/2;
            node->children[1]->GCY=(node->GCY+node->TRY)/2;
            buildTree(node->children[1],shrdBuff,NWi,NWc);
        } else {
            node->children[1]=NULL;
        }
        if(SWc>0){
            node->children[2]= malloc(sizeof *node->children[2]);
            node->children[2]->TRX=node->GCX;
            node->children[2]->TRY=node->GCY;
            node->children[2]->LLX=node->LLX;
            node->children[2]->LLY=node->LLY;
            node->children[2]->GCX=(node->LLX+node->GCX)/2;
            node->children[2]->GCY=(node->LLY+node->GCY)/2;
            buildTree(node->children[2],shrdBuff,SWi,SWc);
        } else {
            node->children[2]=NULL;
        }
        if(SEc>0){
            node->children[3]= malloc(sizeof *node->children[3]);
            node->children[3]->TRX=node->TRX;
            node->children[3]->TRY=node->GCY;
            node->children[3]->LLX=node->GCX;
            node->children[3]->LLY=node->LLY;
            node->children[3]->GCX=(node->GCX+node->TRX)/2;
            node->children[3]->GCY=(node->LLY+node->GCY)/2;
            buildTree(node->children[3],shrdBuff,SEi,SEc);
        } else {
            node->children[3]=NULL;
        }
        node->mass=0;
        node->CMX=0;
        node->CMY=0;
        //Now that we have finished building the 4 trees beneath this node, we calculate the Center of Mass
        //based on the center of mass of the children
        for(i=0;i<4;i++){
            if(node->children[i]!=NULL){
                node->mass+=node->children[i]->mass;
                node->CMX+=node->children[i]->CMX*node->children[i]->mass;
                node->CMY+=node->children[i]->CMY*node->children[i]->mass;
            }
        }
        node->CMX=node->CMX/node->mass;
        node->CMY=node->CMY/node->mass;
        //And tadaaa
    }
}

double calculateForce(struct Node *tree, double *shrdBuff, double *localBuff, int index){
    double distance = sqrt((tree->CMX-shrdBuff[PX(index)])*(tree->CMX-shrdBuff[PX(index)])+
                           (tree->CMY-shrdBuff[PY(index)])*(tree->CMY-shrdBuff[PY(index)]));
    double simplifications = 0;
    double simplificationsRecursive = 0;
    //First we check if the node is not actually the same particle we are calculating
    if(distance>0){
        //Now, we know it is not because the is some distance between the Center of Mass and the particle
        //If the node is external (only contains one particle) or is far away enough, we calculate the force with the center of mass
        if(distance>rcutoff || tree->external){
            double f;
            if(distance<rlimit){
                f=G*tree->mass/(rlimit*rlimit*distance);
            } else {
                f=G*tree->mass/(distance*distance*distance);
            }
            simplifications++;
            localBuff[AX(index)]+=f*(tree->CMX-shrdBuff[PX(index)]);
            localBuff[AY(index)]+=f*(tree->CMY-shrdBuff[PY(index)]);
        } else {
            //If not, we recursively call the calculateForce() function in the children that are not empty.
            int i;
            for(i=0;i<4;i++){
                if(tree->children[i]!=NULL){
                    simplificationsRecursive = calculateForce(tree->children[i],shrdBuff,localBuff,index);
                    simplifications = simplifications + simplificationsRecursive;
                }
            }
        }
    }
    return simplifications;
}

void moveParticle(double *shrdBuff, double *localBuff, int index){
    //Unprecise but fast euler method for solving the time differential equation
    double oldX=shrdBuff[PX(index)];
    double oldY=shrdBuff[PY(index)];
    shrdBuff[PX(index)]+=localBuff[VX(index)]*dt+localBuff[AX(index)]*dt*dt*0.5;
    shrdBuff[PY(index)]+=localBuff[VY(index)]*dt+localBuff[AY(index)]*dt*dt*0.5;
    localBuff[VX(index)]=(shrdBuff[PX(index)]-oldX)/dt;
    localBuff[VY(index)]=(shrdBuff[PY(index)]-oldY)/dt;
}

#ifdef D_GLFW_SUPPORT
void drawParticle(double *shrdBuff, double *radius, int index){
    glBegin(GL_TRIANGLE_FAN);
    int k;
    glVertex2f(shrdBuff[PX(index)],shrdBuff[PY(index)]);
    for(k=0;k<20;k++){
        float angle=(float) (k)/19*2*3.141592;
        glVertex2f(shrdBuff[PX(index)]+radius[index]*cos(angle),shrdBuff[PY(index)]+radius[index]*sin(angle));
    }
    glEnd();
}

void drawBarnesHutDivisions(struct Node *rootNode){
    if(!rootNode->external){
        glBegin(GL_LINES);
        glVertex2f(rootNode->GCX,rootNode->LLY);
        glVertex2f(rootNode->GCX,rootNode->TRY);
        glVertex2f(rootNode->LLX,rootNode->GCY);
        glVertex2f(rootNode->TRX,rootNode->GCY);
        glEnd();
        int i;
        for(i=0;i<4;i++){
            if(rootNode->children[i]!=NULL){
                drawBarnesHutDivisions(rootNode->children[i]);
            }
        }
    }
}
//Función que ejecuta el hilo que se encarga de dibujar la salida gráfica.
void threadVisual(ParametersVisual * paramsVisual){

    glfwMakeContextCurrent(paramsVisual->window);

    drawBarnesHutDivisions(paramsVisual->tree);
    int k;
    for(k=0;k<paramsVisual->nShared;k++){
        drawParticle(paramsVisual->sBuff,paramsVisual->radius,paramsVisual->indexes[k]);
    }

    double t=glfwGetTime()-paramsVisual->t;
			if(t<0.013){
				usleep(1000*1000*(0.013-t));
			}

        	glfwSwapBuffers(paramsVisual->window);
        	glfwPollEvents();

    glClear(GL_COLOR_BUFFER_BIT);

}

#endif

void SaveGalaxy(int count, int nShared, int *indexes, double *sharedBuff);
void SaveGalaxyFile(char *filename, int nShared, int *indexes, double *sharedBuff);

void SaveGalaxy(int count, int nShared, int *indexes, double *sharedBuff)
{
    char filename[100];
    sprintf(filename,"./res/galaxy_%dB_%di.out",nShared,count);
    SaveGalaxyFile(filename, nShared, indexes, sharedBuff);
}

void SaveGalaxyFile(char *filename, int nShared, int *indexes, double *sharedBuff)
{
    int i;
    FILE *res = fopen(filename,"w");

    fprintf(res,"%d\n",nShared);
    for(i=0;i<nShared;i++){
        fprintf(res,"%d\t%e\t%e\t%e\n",indexes[i],sharedBuff[PX(indexes[i])],sharedBuff[PY(indexes[i])],sharedBuff[MASS(indexes[i])]);
    }
    fclose(res);
}

void ReadGalaxyFile(char *filename, int *nShared, int **indexes, double **sharedBuff)
{
    int i,ind;
    FILE *input;

    printf("Reading file %s\n",filename);

    input = fopen(filename,"r");
    if (input==NULL) {
        printf("Error opening file.\n");
        exit(1);
    }
    // Read number of bodies.
    if (fscanf(input,"%d\n",nShared)<1){
        printf("Error reading number of particles.\n");
        exit(1);
    }


    printf("Reading %d bodies\n",*nShared);
    // Reserve memory for indexes and particles.
    *indexes = (int*) malloc(sizeof(int)*(*nShared));
    *sharedBuff = (double *) malloc(sizeof(double)*(3*(*nShared)+1));

    for(i=0;i<(*nShared);i++){
        (*indexes)[i]=i;
    }

    for(i=0;i<(*nShared);i++){
        if (fscanf(input,"%d\t%le\t%le\t%le\n", &ind,&((*sharedBuff)[PX((*indexes)[i])]),&((*sharedBuff)[PY((*indexes)[i])]),&((*sharedBuff)[MASS((*indexes)[i])]))<4){
            printf("Error reading number of particles.\n");
            exit(1);
        }
        //printf("Body %d: (%le,%le) %le\n", ind,(*sharedBuff)[PX((*indexes)[i])],(*sharedBuff)[PY((*indexes)[i])],(*sharedBuff)[MASS((*indexes)[i])]);
    }

    fclose(input);
}

#define DSaveIntermediateState 1
#define DIntervalIntermediateState 100
#define DShowStatistics 1
#define DIntervalStatistics 1

clock_t StartTime, EndTime;
double TimeSpent;

void ShowWritePartialResults(int count,int nOriginal, int nShared, int *indexes, double *sharedBuff)
{
    if (DSaveIntermediateState && !(count % DIntervalIntermediateState))
        SaveGalaxy(count, nOriginal, indexes, sharedBuff);

    if (DShowStatistics && !(count % DIntervalStatistics))
    {
        int i=0;
        double CurrentTime;
        CurrentTime = clock();
        TimeSpent = (double)(CurrentTime - StartTime) / CLOCKS_PER_SEC;
        //Mins = (int)TimeSpent/60;
        //Secs = (TimeSpent-(Mins*60));
        printf("[%.3f] Iteration %d => %d Bodies (%d) \t(Body %d: (%le, %le) %le).\n",TimeSpent, count, nShared, nOriginal, i, sharedBuff[PX(indexes[i])],sharedBuff[PY(indexes[i])],sharedBuff[MASS(indexes[i])]);
    }
}

//Función que ejecutan los hilos que calculan la fuerza y mueven las partículas
void threadCalculate(idStruct * idBuff) {
    // El hilo continua ejecutandose mientras la aplicación no haya indicado que se han acabado las iteraciones a realizar
    while (forceFinished==false) {
        // Se utiliza mutex para controlar el acceso único a iterationsToDo y el wait
        pthread_mutex_lock(&Mutex);
        // Cuando no se ha asignado al hilo que puede realizar otra iteración
        while (iterationsToDo[idBuff->id] < 1 ){
            // El hilo se quedará en espera hasta ser notificado
            pthread_cond_wait(&Sincro,&Mutex);
        }
        // Como se ha salido de la condición, significa que se ha notificado al hilo para que realice una iteración más, por tanto se resta en 1 las iteraciones a realizar
        iterationsToDo[idBuff->id]--;
        // Termina la sección crítica
        pthread_mutex_unlock(&Mutex);
        // Variables que se utilizan para calcular el tiempo de cómputo
        struct timespec startTime, endTime;
        // Se inicia el cálculo de tiempo de cómputo
        clock_gettime(CLOCK_REALTIME, &startTime);
        int i;
        double simplifications = 0;
        //El bucle recorre solo las partículas que han sido asignadas a cada hilo. El cálculo de la fuerza y movimiento de las partículas en el rango se realiza igual que en la versión secuencial
        for (i = paramsBuff[idBuff->id].begin; i < paramsBuff[idBuff->id].end + 1; i++) {
            //Set initial accelerations to zero
            localBuff[AX(indexes[i])] = 0;
            localBuff[AY(indexes[i])] = 0;
            int s;
            for (s = 0; s < 4; s++) {
                //Recursively calculate accelerations
                if (tree->children[s] != NULL){
                     simplifications = calculateForce(tree->children[s], sBuff, localBuff, indexes[i]);
                     statsBuff[idBuff->id].simplifications += simplifications;
                }
            }
            //Calculate new position
            moveParticle(sBuff, localBuff, indexes[i]);

        }
        clock_gettime(CLOCK_REALTIME, &endTime);
        // Se actualizan las estadísticas de este thread
        /*statsBuff[idBuff->id].totalWorkingTime += (endTime.tv_sec - startTime.tv_sec ) + ((endTime.tv_nsec - startTime.tv_nsec) / 1000000000.0);
        statsBuff[idBuff->id].evaluatedParticles += (paramsBuff[idBuff->id].end - paramsBuff[idBuff->id].begin) + 1;*/
        pthread_barrier_wait(&barrierDelete);

        for(i=paramsBuff[idBuff->id].begin;i<paramsBuff[idBuff->id].end + 1;i++){

            if(sBuff[PX(indexes[i])]<=0 || sBuff[PX(indexes[i])]>=1 || sBuff[PY(indexes[i])] <=0 || sBuff[PY(indexes[i])] >= 1){
                indexesToDelete[i] = 1;
            }else{
                indexesToDelete[i] = 0;
            }
        }

        pthread_barrier_wait(&barrierDelete2);
        pthread_mutex_lock(&MutexDelete);
        counterDelete++;
        if(counterDelete == nThreads){
            counterDelete = 0;
            for(i=0;i<nLocal;i++){
                if(indexesToDelete[i] == 1){
                    int r;
                    nLocal--;
                    nShared--;
                    for(r=i;r<nLocal;r++){
                        indexes[r]=indexes[r+1];
                        indexesToDelete[r]=indexesToDelete[r+1];
                    }
                    i--;
                }
            }
        }
        pthread_mutex_unlock(&MutexDelete);
        pthread_barrier_wait(&barrier);

    }
}


int main(int argc, char *argv[]){
    char filename[100];
    int steps=100;
    //Hilos de ejecución por defecto
    //variables para distribuir trabajo entre threads
    int i,j,workByThread,excessThread;
    double *radius;
    // Buffer para guardar threads que ejecutan threadCalculate
    pthread_t *threadsBuff;

#ifdef D_GLFW_SUPPORT
    // Buffer para guardar thread salida gráfica
    pthread_t *threadsVisualBuff;
#endif
    //Buffer para guardar parámetros de cada thread que calcula fuerza

    printf("NBody with %d arguments.\n",argc);
    StartTime = clock();

    if(argc>1){
        nShared=atoi(argv[1]);
        if(argc>2){
            steps=atoi(argv[2]);
        }
    }

    if(argc>4){
        nThreads = atoi(argv[4]);
    }

    if(argc>3 && access(argv[3], F_OK) == 0)
    {
        printf("Read file..\n");
        /* Read bodies initial state from file */
        ReadGalaxyFile(argv[3], &nShared, &indexes, &sBuff);
        argc--;
    }
    else
    {   /* Inicialize the bodies randomly */

        //Buffers to hold the position of the particles and their mass
        sBuff = (double *) malloc(sizeof(double) * (3 * nShared + 1));

        srand(time(NULL));
        for (i = 0; i < nShared; i++) {
            //I start with an almost random distribution of particles
            sBuff[PX(i)] = (float) (i) / (nShared - 1) * 0.8 + 0.1;
            sBuff[PY(i)] = (float) (rand() % 4096) / 4095 * 0.8 + 0.1;
            //With a random Mass between 1 and 3
            sBuff[MASS(i)]=(double) (rand()%2048)/2047*2+1;
        }

        //Index array, to speed up the creation of the tree (faster than passing the 3 floats per particle of x,y and mass)
        indexes = (int*) malloc(sizeof(int)*nShared);
        for(i=0;i<nShared;i++){
            indexes[i]=i;
            indexesToDelete[i]=0;
        }
    }
    pthread_barrier_init(&barrierDelete,NULL,nThreads);
    // Se inicia la barrera con número de threads + 1 porque la aplicación principal también esperará en la barrera
    pthread_barrier_init(&barrier,NULL,nThreads + 1);
    pthread_barrier_init(&barrierDelete2, NULL, nThreads);
    nLocal=nShared;
    int nOriginal=nShared;
    //Buffer to hold velocity in x and y, and acceleration in x and y also
    localBuff = (double *) malloc(sizeof(double)*(4*nLocal));
    //This is for opengl
    radius = (double *) malloc(sizeof(double)*(nShared));
    // Se inicia el buffer de estadísticas de cada hilo
    statsBuff = malloc(sizeof (stats) * nThreads);
    // Se inicia el buffer de estadísticas globales
    globalStats = malloc(sizeof (stats));
    indexesToDelete = (int*) malloc(sizeof (int)*nShared);
    for(i=0;i<nShared;i++){
        // init bodies mass
        radius[i]=sqrt(sBuff[MASS(i)])*0.0025;

        //With zero speed, and zero acceleration
        localBuff[VX(i)]=0;
        localBuff[VY(i)]=0;
        localBuff[AX(i)]=0;
        localBuff[AY(i)]=0;
    }

    //This is the main node, the one that holds the first four children nodes that make the calculation zone
    tree = malloc(sizeof *tree);
    //LLX is the x coordinate of the Low Left corner
    tree->LLX=0;
    //This is the y coordinate..
    tree->LLY=0;

    //Now the same but for the top right corner
    tree->TRX=1;
    tree->TRY=1;
    //The coordinates of the geometric center of the node in x and y
    tree->GCX=0.5;
    tree->GCY=0.5;

    // Save initial state.
    sprintf(filename,"./res/galaxy_%dB_initial.out",nOriginal);
    SaveGalaxyFile(filename, nShared, indexes, sBuff);

    int count=1;
    //If we need to visualize
#ifdef D_GLFW_SUPPORT
    if(argc>3){
		//If you only care about the algorithm, skip until next comment
	    if(!glfwInit()){
    	    printf("Failed to start GLFW\n");
        	return -1;
    	}
    	GLFWwindow *window = glfwCreateWindow(2000,2000,"Simulation",NULL,NULL);
    	if(!window){
        	printf("Failed to open window\n");
        	return -1;
    	}
    	glfwMakeContextCurrent(window);
    	glfwSwapInterval(1);

    	glMatrixMode(GL_PROJECTION);
    	glLoadIdentity();
    	glOrtho(0,1,0,1,0,1);
    	glMatrixMode(GL_MODELVIEW);

        threadsBuff = malloc(sizeof(pthread_t)*nThreads);
        threadsVisualBuff = malloc(sizeof(pthread_t));
        paramsVisualBuff= malloc(sizeof(ParametersVisual));
        paramsBuff = malloc(sizeof(Parameters)*nThreads);

        printf("threads: %d", nThreads);

        while(!glfwWindowShouldClose(window) && count<=steps){
        	//glClear(GL_COLOR_BUFFER_BIT);

			double t=glfwGetTime();
			//We build the tree, which needs a pointer to the initial node, the buffer holding position and mass of the particles, indexes and number of particles
        	buildTree(tree,sBuff,indexes,nShared);
        	//Now that it is built, we calculate the forces per particle
            //Distribución del total de partículas entre hilos, el resto se guarda para asignar al último hilo.
			workByThread = nLocal/nThreads;
            excessThread = nLocal % nThreads;

            for(j=0;j<nThreads;j++){
                //Si es el primer hilo
                if(j == 0){
                    paramsBuff[j].begin = 0;
                    paramsBuff[j].end = paramsBuff[j].begin + workByThread - 1;
                //Si es el último hilo
                } else if(j == (nThreads - 1)){
                    paramsBuff[j].begin = paramsBuff[j - 1].end + 1;
                    paramsBuff[j].end = paramsBuff[j].begin + workByThread - 1 + excessThread;
                //El resto de hilos
                }else{
                    paramsBuff[j].begin = paramsBuff[j - 1].end + 1;
                    paramsBuff[j].end = paramsBuff[j].begin + workByThread - 1;
                }
                //Parámetros para cada hilo para poder ejecutar threadCalculate
                paramsBuff[j].tree = tree;
                paramsBuff[j].sBuff = sBuff;
                paramsBuff[j].localBuff = localBuff;
                paramsBuff[j].indexes = indexes;
                //Se crea el hilo asignandole threadCalculate y los parámetros para su rango
                if((pthread_create(&threadsBuff[j], NULL, (void * (*)(void *)) threadCalculate,&paramsBuff[j])) !=0) {
                    for(i=0;i<nThreads;i++){
                        pthread_cancel(threadsBuff[i]);
                    }
                }

            }
            //Join de threads de cálculo de fuerzas y mover partículas
            for(i=0;i<nThreads;i++){
                if(pthread_join(threadsBuff[i],NULL) !=0){
                    for(j=0;j<nThreads;j++){
                        pthread_cancel(threadsBuff[j]);
                    }
                }
            }

        	for(i=0;i<nLocal;i++){

				if(sBuff[PX(indexes[i])]<=0 || sBuff[PX(indexes[i])]>=1 || sBuff[PY(indexes[i])] <=0 || sBuff[PY(indexes[i])] >= 1){
                	int r;
                	nLocal--;
                	nShared--;
                	for(r=i;r<nLocal;r++){
                    	indexes[r]=indexes[r+1];
                	}
                	i--;
            	}
        	}

            SaveGalaxy(count, nShared, indexes, sBuff);

			//This is only for visualization
            //Si no es la primera iteración, se espera a que finalice el hilo que estaba mostrando los resultados para la iteración anterior
             if(count != 1){
                if(pthread_join(threadsVisualBuff[0],NULL) !=0){
                         pthread_cancel(threadsVisualBuff[0]);
                }
             }
             //Se asignan los parámetros al hilo que va a controlar la salida gráfica
             paramsVisualBuff[0].window = window;
             paramsVisualBuff[0].indexes = indexes;
             paramsVisualBuff[0].sBuff = sBuff;
             paramsVisualBuff[0].nShared = nShared;
             paramsVisualBuff[0].radius = radius;
             paramsVisualBuff[0].tree = tree;
             paramsVisualBuff[0].t = t;
            //Se crea el hilo que muestra la salida gráfica con los parámetros asignados previamente para que ejecute la funcion threadVisual
            if(pthread_create(&threadsVisualBuff[0], NULL, (void * (*)(void *)) threadVisual,&paramsVisualBuff[0]) !=0) {
                    pthread_cancel(threadsVisualBuff[0]);
            }
            //Si es la última iteración, se debe esperar a que finalice el hilo de la salida gráfica puesto que ya no recorrerá más veces el bucle
        	if(count == steps){
                if(pthread_join(threadsVisualBuff[0],NULL) !=0){
                        pthread_cancel(threadsVisualBuff[0]);
                    }
            }

            ShowWritePartialResults(count, nOriginal, nShared, indexes, sBuff);

            //We advance one step
			count++;
    	}
    	glfwTerminate();
	} else {
#endif
    //This is the pure algorithm, without visualization
    //system("mkdir res");
    //Buffers se inicializan en función del número de threads
    iterationsToDo = malloc(sizeof(int )*nThreads);
    threadsBuff = malloc(sizeof(pthread_t)*nThreads);
    paramsBuff = malloc(sizeof(Parameters)*nThreads);
    idBuff = malloc(sizeof(idStruct)*nThreads);

    for (int i = 0; i < nThreads; ++i) {
        iterationsToDo[i] = 0;
    }
    for (int j = 0; j < nThreads; ++j) {
        idBuff[j].id = j;
        if((pthread_create(&threadsBuff[j], NULL, (void * (*)(void *)) threadCalculate,&idBuff[j])) !=0) {
            for(i=0;i<nThreads;i++){
                pthread_cancel(threadsBuff[i]);
            }
        }

    }

    while(count<=steps){

        //First we build the tree
        buildTree(tree,sBuff,indexes,nShared);
        //Distribución del total de partículas entre hilos, el resto se guarda para asignar al último hilo.
        workByThread = nLocal/nThreads;
        excessThread = nLocal % nThreads;

        if (count == 500 || count == 2){
            for (int k = 0; k < nThreads; ++k) {
                printf("\n Tiempo del thread %d : %f", idBuff[k].id , statsBuff[k].totalWorkingTime);
                printf("\n Simplifications del thread %d : %f", idBuff[k].id, statsBuff[k].simplifications);
                printf("\n Partículas evaluadas del thread %d : %f", idBuff[k].id, statsBuff[k].evaluatedParticles);
            }
        }

        for(j=0;j<nThreads;j++){
            //Si es el primer hilo
            if(j == 0){
                paramsBuff[j].begin = 0;
                paramsBuff[j].end = paramsBuff[j].begin + workByThread - 1;
                //Si es el último hilo
            } else if(j == (nThreads - 1)){
                paramsBuff[j].begin = paramsBuff[j - 1].end + 1;
                paramsBuff[j].end = paramsBuff[j].begin + workByThread - 1 + excessThread;
                //El resto de hilos
            }else{
                paramsBuff[j].begin = paramsBuff[j - 1].end + 1;
                paramsBuff[j].end = paramsBuff[j].begin + workByThread - 1;
            }
            //Parámetros para cada hilo para poder ejecutar threadCalculate
            //Se crea el hilo asignandole threadCalculate y los parámetros para su rango


        }
        pthread_mutex_lock(&Mutex);
        for(int i=0;i<nThreads;i++){
            iterationsToDo[i] = 1;
        }
        pthread_cond_broadcast(&Sincro);
        pthread_mutex_unlock(&Mutex);
        //Join de threads de cálculo de fuerzas y mover partículas
        pthread_barrier_wait(&barrier);

        //To be able to store the positions of the particles
        ShowWritePartialResults(count,nOriginal, nShared, indexes, sBuff);
        //We advance one step
        if(count == steps){
            forceFinished = true;
        }
        count++;
    }

#ifdef D_GLFW_SUPPORT
    }
#endif
    for(i=0;i<nThreads;i++){
        if(pthread_join(threadsBuff[i],NULL) !=0){
            for(j=0;j<nThreads;j++){
                pthread_cancel(threadsBuff[j]);
            }
        }
    }
    EndTime = clock();
    TimeSpent = (double)(EndTime - StartTime) / CLOCKS_PER_SEC;
    printf("NBody Simulation took %.3f seconds.\n",TimeSpent);

    // Save initial state.
    sprintf(filename,"./res/galaxy_%dB_%di_final.out",nOriginal, count-1);
    SaveGalaxyFile(filename, nShared, indexes, sBuff);
    pthread_barrier_destroy(&barrier);
    free(sBuff);
    free(localBuff);
    free(radius);
    free(indexes);
    free(threadsBuff);
    free(paramsBuff);
#ifdef D_GLFW_SUPPORT
    free(paramsVisualBuff);
    free(threadsVisualBuff);
#endif
    return 0;
}
